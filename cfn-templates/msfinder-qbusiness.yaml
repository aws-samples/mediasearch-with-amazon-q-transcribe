#
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
Description: |
  MediaSearch Q Business Solution - Finder stack (v0.1.0)
Parameters:
  CreateIdentityCenterApplication:
    Type: String
    Description: If you deploying to the SAME Account as the Identity Centre, Would you like to auto-create the IdentityCenter Application with the trusted token issuer ?
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'

  IdentityCenterInstanceArn:
    Type: String
    Description: Enter the Amazon Resource Name (ARN) of the Identity Center instance.
    AllowedPattern: ^arn:(?:[a-z0-9]+:){0,1}(?:[a-z0-9-]+:){0,1}aws:.*$
    ConstraintDescription: Must be a valid Amazon Resource Name (ARN)

  IdentityCenterApplicationArn:
    Type: String
    Description: If you selected 'Yes' above, leave this parameter empty, otherwise enter the ARN of your existing IdentityCenter Application
  QBusinessApplicationId:
    Type: String
    Description: The QBusiness Application Id

  RetrieverType:
    Type: String
    Default: Native
    AllowedValues:
      - Native
      - Kendra
  KendraIndexId:
    Type: String
    ConstraintDescription: "Kendra Index id cannot be blank"
  MediaBucketNames:
    Type: CommaDelimitedList
    AllowedPattern: .+ 
    Description: >-
      (Required) A comma-delimited list of media bucket names - may include wildcards. (Fetch this value from the CFN output for the corresponding Indexer). Needed to support presigned URLs used to access media files contained in search results.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Identity Centre related parameters
        Parameters:
          - IdentityCenterInstanceArn
          - CreateIdentityCenterApplication
          - IdentityCenterApplicationArn
      - Label:
          default: MediaSearch Indexer parameters
        Parameters:
          - QBusinessApplicationId
          - RetrieverType
          - KendraIndexId
          - MediaBucketNames

Resources:
  JWTLambdalayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content: ../layers/jwt
      CompatibleRuntimes:
        - python3.11
      Description: Layer with jwt package required to decode jwt idTokens
      LicenseInfo: MIT
  Boto3Lambdalayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content: ../layers/boto3
      CompatibleRuntimes:
        - python3.11
      Description: Layer with boto3 package 
      LicenseInfo: MIT

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${AWS::StackName}-webapp-user-pool'
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  IdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      AllowClassicFlow: false
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !Sub
            - 'cognito-idp.${region}.amazonaws.com/${client}'
            - region: !Ref 'AWS::Region'
              client: !Ref UserPool
  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: !Sub ${AWS::StackName}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool  

  IdentityPoolRoleAttachment:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        'authenticated': !GetAtt IDPoolAuthRole.Arn

  IDPoolAuthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
          - Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ExecuteApiPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/prod/POST/list'
              - Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/prod/POST/query'
              - Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/prod/POST/getIdcToken'
              - Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/prod/POST/gets3presignedurl'
                

  ## Role to be used by the repository 
  MediaRepositoryAssumeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
          - Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::<ARTIFACT_BUCKET_TOKEN>/<ARTIFACT_PREFIX_TOKEN><FINDER_ZIPFILE>'
                Action:
                  - 's3:GetObject'
          PolicyName: MediaRepositoryExecutionPolicy
  
  ##The role to be assumed by the application using sts_assume_role
  MediaAppCredsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
          - Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS:
              - Fn::GetAtt:
                - IDPoolAuthRole
                - Arn
              - Fn::Sub: "arn:aws:sts::${AWS::AccountId}:assumed-role/${IDPoolAuthRole}/CognitoIdentityCredentials"
              - Fn::GetAtt:
                - IDPoolAuthRole
                - Arn
            Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - !If
                - RetrieverTypeKendra
                - Effect: Allow
                  Resource: !Sub
                    - arn:aws:kendra:${region}:${account}:index/${index}*
                    - region: !Ref AWS::Region
                      account: !Ref AWS::AccountId
                      index: !Ref KendraIndexId
                  Action:
                    - 'kendra:DescribeIndex'
                    - 'kendra:SubmitFeedback'
                    - 'kendra:ListDataSources'
                    - 'kendra:Query'
                - Effect: Allow
                  Resource:
                    - !Sub "arn:aws:qbusiness:${AWS::Region}:${AWS::AccountId}:application/${QBusinessApplicationId}"
                    - !Sub "arn:aws:qbusiness:${AWS::Region}:${AWS::AccountId}:application/${QBusinessApplicationId}/*"
                  Action:
                    - qbusiness:*
              - Effect: Allow
                Resource: !Split
                  - ','
                  - !Sub
                    - 'arn:aws:s3:::${inner}/*'
                    - inner: !Join
                      - '/*,arn:aws:s3:::'
                      - !Ref MediaBucketNames
                Action:
                  - s3:GetObject           
          PolicyName: AWSMediaAppCredsPolicy


  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-webapp-api
      Description: API Gateway for the all endpoints to support Amazon Q for Business
  ApiGatewayAuthorizer:
    DependsOn:
    - APIGateway
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      Name: 'CognitoAuthorizer'
      Type: 'COGNITO_USER_POOLS'
      IdentitySource: 'method.request.header.Authorization'
      RestApiId: !Ref APIGateway
      ProviderARNs:
        - !GetAtt UserPool.Arn
  APIGatewayOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-security-token'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            method.response.header.Access-Control-Allow-Credentials: "'true'"
            method.response.header.Access-Control-Max-Age: "'300'"
          StatusCode: '200'
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
      - ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Origin: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Credentials: true
          method.response.header.Access-Control-Max-Age: true
        StatusCode: '200'
      ResourceId: !GetAtt APIGateway.RootResourceId
      RestApiId:
        Ref: APIGateway

  APIGatewayQueryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - APIGateway
        - RootResourceId
      PathPart: query
      RestApiId:
        Ref: APIGateway
  APIGatewayListResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - APIGateway
        - RootResourceId
      PathPart: list
      RestApiId:
        Ref: APIGateway
  APIGatewayGetIDCTokenResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - APIGateway
        - RootResourceId
      PathPart: getIdcToken
      RestApiId:
        Ref: APIGateway
  APIGatewayGetS3PresignedResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - APIGateway
        - RootResourceId
      PathPart: gets3presignedurl
      RestApiId:
        Ref: APIGateway

  APIGatewayQueryOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-security-token'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            method.response.header.Access-Control-Allow-Credentials: "'true'"
            method.response.header.Access-Control-Max-Age: "'300'"
          StatusCode: '200'
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
      - ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Origin: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Credentials: true
          method.response.header.Access-Control-Max-Age: true
        StatusCode: '200'
      ResourceId:
        Ref: APIGatewayQueryResource
      RestApiId:
        Ref: APIGateway
  APIGatewayQueryPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserPromptsLambda.Arn}/invocations
      MethodResponses:
      - ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Origin: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Credentials: true
          method.response.header.Access-Control-Max-Age: true
        StatusCode: '200'
      ResourceId:
        Ref: APIGatewayQueryResource
      RestApiId:
        Ref: APIGateway
  APIGatewayListOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-security-token'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            method.response.header.Access-Control-Allow-Credentials: "'true'"
            method.response.header.Access-Control-Max-Age: "'300'"
          StatusCode: '200'
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
      - ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Origin: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Credentials: true
          method.response.header.Access-Control-Max-Age: true
        StatusCode: '200'
      ResourceId:
        Ref: APIGatewayListResource
      RestApiId:
        Ref: APIGateway
  APIGatewayListPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserConversationLambda.Arn}/invocations
      MethodResponses:
      - ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Origin: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Credentials: true
          method.response.header.Access-Control-Max-Age: true
        StatusCode: '200'
      ResourceId:
        Ref: APIGatewayListResource
      RestApiId:
        Ref: APIGateway
  APIGatewayGetS3PresignedOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-security-token'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            method.response.header.Access-Control-Allow-Credentials: "'true'"
            method.response.header.Access-Control-Max-Age: "'300'"
          StatusCode: '200'
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
      - ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Origin: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Credentials: true
          method.response.header.Access-Control-Max-Age: true
        StatusCode: '200'
      ResourceId:
        Ref: APIGatewayGetS3PresignedResource
      RestApiId:
        Ref: APIGateway
  APIGatewayGetS3PresignedPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PreSignedURLCreateLambda.Arn}/invocations
      MethodResponses:
      - ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Origin: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Credentials: true
          method.response.header.Access-Control-Max-Age: true
        StatusCode: '200'
      ResourceId:
        Ref: APIGatewayGetS3PresignedResource
      RestApiId:
        Ref: APIGateway

  APIGatewayGetIDCTokenOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-security-token'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            method.response.header.Access-Control-Allow-Credentials: "'true'"
            method.response.header.Access-Control-Max-Age: "'300'"
          StatusCode: '200'
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
      - ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Origin: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Credentials: true
          method.response.header.Access-Control-Max-Age: true
        StatusCode: '200'
      ResourceId:
        Ref: APIGatewayGetIDCTokenResource
      RestApiId:
        Ref: APIGateway
  APIGatewayGetIDCTokenPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IDCTokenCreateLambda.Arn}/invocations
      MethodResponses:
      - ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: true
        StatusCode: '200'
      ResourceId:
        Ref: APIGatewayGetIDCTokenResource
      RestApiId:
        Ref: APIGateway

  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - APIGatewayListResource
    - APIGatewayListPOSTMethod
    - APIGatewayListOPTIONSMethod
    - APIGatewayQueryResource
    - APIGatewayQueryPOSTMethod
    - APIGatewayQueryOPTIONSMethod
    - APIGatewayOPTIONSMethod
    - APIGatewayGetS3PresignedResource
    - APIGatewayGetS3PresignedOPTIONSMethod
    - APIGatewayGetS3PresignedPOSTMethod
    - APIGatewayGetIDCTokenOPTIONSMethod
    - APIGatewayGetIDCTokenPOSTMethod
    - APIGatewayGetIDCTokenResource
    Properties:
      RestApiId:
        Ref: APIGateway

  APIGatewayDeploymentStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: APIGatewayDeployment
      RestApiId:
        Ref: APIGateway
      StageName: prod


  UserPromptsLambda:
    Type: AWS::Lambda::Function
    #Suppress W92: Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
    #Suppress W89: Lambda functions should be deployed inside a VPC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W92
          - id: W89
    Properties:
      Layers:
        - !Ref JWTLambdalayer
        - !Ref Boto3Lambdalayer
      Code: ../lambda/user-interaction
      Environment:
        Variables:
          AMAZONQ_APP_ID: !Ref QBusinessApplicationId
          AMAZONQ_REGION: !Ref AWS::Region
          IAM_ROLE_ARN: !GetAtt QBusinessServiceRole.Arn 
      Handler: user_prompts.handler
      Role: !GetAtt IdentityCenterTokenLambdaServiceRole.Arn
      Runtime: python3.11
      Timeout: 900

  UserPromptsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UserPromptsLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*'

  UserConversationLambda:
    Type: AWS::Lambda::Function
    #Suppress W92: Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
    #Suppress W89: Lambda functions should be deployed inside a VPC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W92
          - id: W89    
    Properties:
      Layers:
        - !Ref JWTLambdalayer
        - !Ref Boto3Lambdalayer        
      Code: ../lambda/user-interaction
      Environment:
        Variables:
          AMAZONQ_APP_ID: !Ref QBusinessApplicationId
          AMAZONQ_REGION: !Ref AWS::Region
          IAM_ROLE_ARN: !GetAtt QBusinessServiceRole.Arn 
      Handler: user_conversation.handler
      Role: !GetAtt IdentityCenterTokenLambdaServiceRole.Arn
      Runtime: python3.11
      Timeout: 900

  UserConversationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UserConversationLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*'

  IDCTokenCreateLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt IDCTokenCreateLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*'

  IDCTokenCreateLambda:
    Type: AWS::Lambda::Function
    #Suppress W92: Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
    #Suppress W89: Lambda functions should be deployed inside a VPC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W92
          - id: W89    
    Properties:
      Code: ../lambda/idc-token
      Environment:
        Variables:
          CLIENT_ID: !If [CreateIdentityCenterApplication,!GetAtt CallIDCAppCreateLambda.ApplicationArn, !Ref IdentityCenterApplicationArn ]
      Handler: createidctoken.handler
      Role: !GetAtt IdentityCenterTokenLambdaServiceRole.Arn
      Runtime: python3.11
      Timeout: 900

  IdentityCenterTokenLambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole    
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        
  IDCTokenLambdaServicePolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      guard:
        SuppressedRules:
          - IAM_POLICYDOCUMENT_NO_WILDCARD_RESOURCE # CreateTokenWithIAM requires wildcard
    Properties:
      Roles:
        - !Ref IdentityCenterTokenLambdaServiceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowAssumeQRole
          Effect: Allow
          Action:
          - "sts:AssumeRole"
          - "sts:SetContext"
          Resource: !GetAtt QBusinessServiceRole.Arn
        - Sid: AllowTokenExchange
          Effect: Allow
          Action:
            - "sso-oauth:CreateTokenWithIAM"
          Resource: "*" 

  IDCAppCreateLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole    
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: SSOCreateApplication
              Effect: Allow
              Action:
              - sso:CreateTrustedTokenIssuer
              - sso:PutApplicationAssignmentConfiguration
              - sso:CreateApplication
              - sso:PutApplicationAuthenticationMethod
              - sso:PutApplicationGrant
              - sso:PutApplicationAccessScope
              Resource: 
              - !Ref IdentityCenterInstanceArn
              - arn:aws:sso::aws:applicationProvider/custom
              - !Sub arn:aws:sso::${AWS::AccountId}:application/*/*
          PolicyName: SSOCreateApplicationPolicy  
  IDCAppCreateLambda:
    DependsOn: 
      - UserPool
      - UserPoolClient  
    Type: AWS::Lambda::Function
    #Suppress W92: Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
    #Suppress W89: Lambda functions should be deployed inside a VPC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W92
          - id: W89
    Properties:
      Layers:
        - !Ref Boto3Lambdalayer    
      Code: ../lambda/idc-token
      Environment:
        Variables:
          IDC_INSTANCE_ARN: !Ref IdentityCenterInstanceArn
          IDC_APP_NAME: !Sub ${AWS::StackName}-idc-app
          IDC_TRUSTEDISSUER_NAME: !Sub ${AWS::StackName}-idc-trust-issuer
          IDC_ISSUER_URL: !Sub 'https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}'
          IDC_AUD: !Ref UserPoolClient
      Handler: idcappcreate.handler
      Role: !GetAtt IDCAppCreateLambdaRole.Arn
      Runtime: python3.11
      Timeout: 900

  CallIDCAppCreateLambda:
    Condition: CreateIdentityCenterApplication
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt IDCAppCreateLambda.Arn
      TriggerDependencies:
        - !Ref IdentityCenterInstanceArn

  PreSignedURLCreateLambda:
    Type: AWS::Lambda::Function
    #Suppress W92: Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
    #Suppress W89: Lambda functions should be deployed inside a VPC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W92
          - id: W89    
    Properties:
      Code: ../lambda/presigned-url
      Handler: presignedurl.handler
      Role: !GetAtt PreSignedURLCreateLambdaRole.Arn
      Runtime: python3.11
      Timeout: 900

  PreSignedURLCreateLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole    
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:ListBucket
              Resource: !Split
                - ','
                - !Sub
                  - 'arn:aws:s3:::${inner}/*'
                  - inner: !Join
                    - '/*,arn:aws:s3:::'
                    - !Ref MediaBucketNames
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:ListBucket
              Resource: !Split
                - ','
                - !Sub
                  - 'arn:aws:s3:::${inner}'
                  - inner: !Join
                    - ',arn:aws:s3:::'
                    - !Ref MediaBucketNames
          PolicyName: PreSignedURLCreateLambdaPolicy  

  PreSignedURLCreateLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignedURLCreateLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*'
  QBusinessManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowQChat
          Effect: Allow
          Action:
            - qbusiness:ListMessages
            - qbusiness:ChatSync
            - qbusiness:ListConversations
            - qbusiness:DeleteConversation
          Resource: !Sub "arn:${AWS::Partition}:qbusiness:${AWS::Region}:${AWS::AccountId}:application/${QBusinessApplicationId}"
        
  QBusinessServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS:
            - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
          Action:
          - sts:AssumeRole
          - sts:SetContext
          Condition:
            ArnEquals:
              "aws:PrincipalArn": !GetAtt IdentityCenterTokenLambdaServiceRole.Arn
      Path: /
      ManagedPolicyArns:
      - !Ref QBusinessManagedPolicy
  
  ##Create an App for our application in the Amplify Console
  AmplifyApp:
    Type: 'AWS::Amplify::App'
    Properties:
      CustomRules:
        - Source: /playground/
          Target: /index.html
          Status: 200    
      IAMServiceRole: !GetAtt MediaRepositoryAssumeRole.Arn
      Name: !Sub ${AWS::StackName}-App

  ##Create a branch for the App to be built
  AmplifyBranch:
    Type: 'AWS::Amplify::Branch'
    Properties:
      AppId: !GetAtt
        - AmplifyApp
        - AppId
      EnableAutoBuild: true
      BranchName: main

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "MediasearchCodeBuild-${AWS::StackName}"
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: REACT_APP_COGNITO_REGION
            Value: !Ref AWS::Region
          - Name: REACT_APP_IDENTITY_POOL_ID
            Value: !Ref IdentityPool
          - Name: REACT_APP_PROJECT_REGION
            Value: !Ref AWS::Region
          - Name: REACT_APP_REGION
            Value: !Ref AWS::Region
          - Name: REACT_APP_USER_POOL_ID
            Value: !Ref UserPool
          - Name: REACT_APP_WEB_CLIENT_ID
            Value: !Ref UserPoolClient
          - Name: REACT_APP_QBUSINESS_WEBAPP_API
            Value: !Sub "https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"
          - Name: AMPLIFY_APP_ID
            Value: !GetAtt AmplifyApp.AppId
          - Name: AMPLIFY_BRANCH
            Value: !GetAtt AmplifyBranch.BranchName
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - echo "Installing dependencies..."
                - pip install requests boto3          
            pre_build:
              commands:
                - aws s3 cp s3://<ARTIFACT_BUCKET_TOKEN>/<ARTIFACT_PREFIX_TOKEN><FINDER_ZIPFILE> ./source.zip
                - unzip source.zip -d .
                - rm source.zip
                - npm install
            build:
              commands:
                - npm run build
                - echo "window.aws_config = {\"aws_project_region\":\"$REACT_APP_PROJECT_REGION\",\"aws_cognito_region\":\"$REACT_APP_COGNITO_REGION\",\"aws_cognito_identity_pool_id\":\"$REACT_APP_IDENTITY_POOL_ID\",\"aws_user_pools_id\":\"$REACT_APP_USER_POOL_ID\",\"aws_user_pools_web_client_id\":\"$REACT_APP_WEB_CLIENT_ID\",\"aws_cognito_username_attributes\":[\"EMAIL\"],\"aws_cognito_mfa_configuration\":\"OFF\",\"aws_cognito_password_protection_settings\":{\"passwordPolicyMinLength\":8,\"passwordPolicyCharacters\":[\"REQUIRES_LOWERCASE\",\"REQUIRES_UPPERCASE\",\"REQUIRES_NUMBERS\",\"REQUIRES_SYMBOLS\"]},\"aws_cognito_verification_mechanisms\":[\"EMAIL\"],\"aws_cloud_logic_custom\":[{\"name\":\"qbusiness_webapp_api\",\"endpoint\":\"$REACT_APP_QBUSINESS_WEBAPP_API\",\"region\":\"$REACT_APP_REGION\"}]}" > ./build/aws-config.js
            post_build:
              commands:
                - aws s3 cp s3://<ARTIFACT_BUCKET_TOKEN>/<ARTIFACT_PREFIX_TOKEN><AMPLIFY_BUILDER> ./amplify-build.py
                - cd build && zip -r ../build.zip . && cd ..
                - python amplify-build.py --app-id "$AMPLIFY_APP_ID" --branch-name "$AMPLIFY_BRANCH" --dep-loc ./build.zip

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetBucketLocation
                Resource:
                  - !Sub 'arn:aws:s3:::<ARTIFACT_BUCKET_TOKEN>/*'
                  - !Sub 'arn:aws:s3:::<ARTIFACT_BUCKET_TOKEN>'      
        - PolicyName: CodeBuildServiceRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Resource:
                  - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*
              - Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents  
              - Effect: Allow
                Action:
                  - amplify:StartDeployment
                  - amplify:CreateDeployment
                  - amplify:StopJob
                  - amplify:GetJob
                Resource:
                  - !Sub arn:aws:amplify:${AWS::Region}:${AWS::AccountId}:apps/${AmplifyApp.AppId}/*
                  - !Sub arn:aws:amplify:${AWS::Region}:${AWS::AccountId}:apps/arn:aws:amplify:${AWS::Region}:${AWS::AccountId}:apps/${AmplifyApp.AppId}/*

  MediaLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/*
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
          PolicyName: MediaLambdaPolicy  

  BuildTriggerLambda:
    Type: AWS::Lambda::Function
    #Suppress W92: Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
    #Suppress W89: Lambda functions should be deployed inside a VPC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W92
          - id: W89    
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Role: !GetAtt MediaLambdaRole.Arn
      Timeout: 900
      Code: ../lambda/build-trigger
      Environment:
        Variables:
          CB_PROJECTNAME: !Ref CodeBuildProject
      
  BuildTrigger:
    Type: Custom::BuildTrigger
    DependsOn: 
      - AmplifyApp
      - AmplifyBranch
      - CodeBuildProject
    Properties:
      ServiceToken: !GetAtt BuildTriggerLambda.Arn
      Param1: '<ARTIFACT_BUCKET_TOKEN>'
      Param2: '<ARTIFACT_PREFIX_TOKEN>'

Conditions:
  IsIdentityCenterApplicationArnNotEmpty: !Not [!Equals [!Ref "IdentityCenterApplicationArn", ""]]
  CreateIdentityCenterApplication: !Equals [!Ref CreateIdentityCenterApplication,'Yes']
  RetrieverTypeKendra: !Equals
    - !Ref RetrieverType
    - 'Kendra'
  RetrieverTypeNative: !Equals
    - !Ref RetrieverType
    - 'Native'
Outputs:
  IdentityCenterTokenLambdaServiceRole:
    Description: The service role used by the IdentityCenter Token generator Lambda
    Value: !GetAtt IdentityCenterTokenLambdaServiceRole.Arn

  IdentityCenterApplicationConsoleURL:
    Condition: CreateIdentityCenterApplication
    Value: !GetAtt CallIDCAppCreateLambda.ApplicationConsoleURL
    Description: Navigate to this URL and Assign user

  MediaSearchFinderURL:
    Description: The Mediasearch Q Business Finder Amplify URL 
    Value: !Join
      - ''
      - - 'https://main.'
        - !GetAtt AmplifyApp.DefaultDomain

  UserPoolClientId:
    Value: !Ref UserPoolClient

  UserPoolId:
    Value: !Ref UserPool


  IdentityPoolId:
    Value: !Ref IdentityPool
  APIGatewayURL:
    Value: !Sub 'https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'

  CognitoTokenSigningURL:
    Value: !Sub 'https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}'

  QBusinessApplicationId:
    Description: The Q Business Application Id
    Value: !Ref QBusinessApplicationId